From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Mon, 16 Aug 2021 16:59:22 -0700
Subject: [PATCH] Better Potion API


diff --git a/src/main/java/io/papermc/paper/potion/PaperPotion.java b/src/main/java/io/papermc/paper/potion/PaperPotion.java
new file mode 100644
index 0000000000000000000000000000000000000000..b947a3513a6faf535342af089294011d2969999c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/potion/PaperPotion.java
@@ -0,0 +1,98 @@
+package io.papermc.paper.potion;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import net.minecraft.world.item.alchemy.PotionUtils;
+import org.bukkit.Color;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.potion.PotionBrewer;
+import org.bukkit.potion.PotionEffect;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+@DefaultQualifier(NonNull.class)
+public class PaperPotion extends Potion {
+
+    private static final Map<net.minecraft.world.item.alchemy.Potion, Potion> NMS_MAP = new HashMap<>();
+    private final net.minecraft.world.item.alchemy.Potion handle;
+
+    public PaperPotion(String id, net.minecraft.world.item.alchemy.Potion handle) {
+        super(NamespacedKey.minecraft(id));
+        this.handle = handle;
+        NMS_MAP.put(handle, this);
+    }
+
+    public static void registerPotion(PaperPotion potion) {
+        if (Potion.BY_KEY.containsKey(potion.getKey())) {
+            throw new IllegalArgumentException("Cannot set already-set potion");
+        }
+
+        Potion.BY_KEY.put(potion.getKey(), potion);
+    }
+
+    public static void setPotionBrewer(PotionBrewer other) {
+        Preconditions.checkArgument(Potion.brewer == null, "PotionBrewer can only be set once, and internally");
+        Potion.brewer = other;
+    }
+
+    @Override
+    public List<PotionEffect> getEffects() {
+        return Collections.unmodifiableList(Lists.transform(this.handle.getEffects(), CraftPotionUtil::toBukkit));
+    }
+
+    @Override
+    public boolean hasInstantEffects() {
+        return this.handle.hasInstantEffects();
+    }
+
+    @Override
+    public Color getColor() {
+        return Color.fromRGB(PotionUtils.getColor(this.handle));
+    }
+
+    @Override
+    public boolean isUpgradeable() {
+        return PaperPotionUtil.UPGRADEABLES.containsKey(this.handle);
+    }
+
+    @Override
+    public boolean isExtendable() {
+        return PaperPotionUtil.EXTENDABLES.containsKey(this.handle);
+    }
+
+    @Override
+    public boolean isUpgraded() {
+        return PaperPotionUtil.UPGRADEABLES.containsValue(this.handle);
+    }
+
+    @Override
+    public boolean isExtended() {
+        return PaperPotionUtil.EXTENDABLES.containsValue(this.handle);
+    }
+
+    public static net.minecraft.world.item.alchemy.Potion getHandle(Potion potion) {
+        if (potion instanceof PotionWrapper wrapper) {
+            potion = wrapper.getPotion();
+        }
+        if (potion instanceof PaperPotion paperPotion) {
+            return paperPotion.handle;
+        }
+        throw new IllegalArgumentException(potion + " couldn't be converted to an nms Potion");
+    }
+
+    public static Potion getFromNms(net.minecraft.world.item.alchemy.Potion potion) {
+        return Objects.requireNonNull(NMS_MAP.get(potion));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static Potion fromLegacy(org.bukkit.potion.PotionData legacyPotionData) {
+        return Objects.requireNonNull(Potion.getByKey(NamespacedKey.fromString(CraftPotionUtil.fromBukkit(legacyPotionData))), () -> legacyPotionData + " could not be converted into a modern paper Potion instance");
+    }
+}
diff --git a/src/main/java/io/papermc/paper/potion/PaperPotionUtil.java b/src/main/java/io/papermc/paper/potion/PaperPotionUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ba5ded8a8cde85b92607c0e2786cf06f4453c2e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/potion/PaperPotionUtil.java
@@ -0,0 +1,49 @@
+package io.papermc.paper.potion;
+
+import com.google.common.collect.BiMap;
+import com.google.common.collect.ImmutableBiMap;
+import net.minecraft.core.Registry;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.item.alchemy.Potion;
+import net.minecraft.world.item.alchemy.PotionBrewing;
+
+final class PaperPotionUtil {
+
+    private PaperPotionUtil() {
+    }
+
+    static final BiMap<Potion, Potion> EXTENDABLES;
+    static final BiMap<Potion, Potion> UPGRADEABLES;
+
+    static {
+        final ImmutableBiMap.Builder<Potion, Potion> extendables = ImmutableBiMap.builder();
+        final ImmutableBiMap.Builder<Potion, Potion> upgradeables = ImmutableBiMap.builder();
+        for (Potion input : Registry.POTION) {
+            for (PotionBrewing.Mix<Potion> mix : PotionBrewing.POTION_MIXES) {
+                if (mix.from == input && input.getName("").equals(mix.to.getName(""))) {
+                    ImmutableBiMap.Builder<Potion, Potion> toAddTo = null;
+                    boolean skip = false;
+                    for (int i = 0; i < input.getEffects().size(); i++) {
+                        MobEffectInstance inputEffect = input.getEffects().get(i);
+                        MobEffectInstance outputEffect = mix.to.getEffects().get(i);
+                        if (inputEffect.getEffect() == outputEffect.getEffect()) {
+                            if (outputEffect.getAmplifier() > inputEffect.getAmplifier()) {
+                                toAddTo = upgradeables;
+                            } else if (outputEffect.getDuration() > inputEffect.getDuration()) {
+                                toAddTo = extendables;
+                            } else {
+                                skip = true;
+                                break;
+                            }
+                        }
+                    }
+                    if (!skip && toAddTo != null) {
+                        toAddTo.put(input, mix.to);
+                    }
+                }
+            }
+        }
+        EXTENDABLES = extendables.build();
+        UPGRADEABLES = upgradeables.build();
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index 29e97cfec599e19eb85b81e49c997b562c8d3a6b..14d706bc3d2e03f75c10c2bd9907ce48451d8290 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -153,6 +153,12 @@ public class Arrow extends AbstractArrow {
 
     public void setPotionType(String string) {
         this.potion = Registry.POTION.get(new net.minecraft.resources.ResourceLocation(string));
+        // Paper start
+        this.setPotionType(this.potion);
+    }
+    public void setPotionType(Potion potion) {
+        this.potion = potion;
+        // Paper end
         this.getEntityData().set(Arrow.ID_EFFECT_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, (Collection) this.effects)));
     }
 
diff --git a/src/main/java/net/minecraft/world/item/alchemy/Potions.java b/src/main/java/net/minecraft/world/item/alchemy/Potions.java
index 725663a7602b8926a176565e0bacf1ad10e42af1..82f66bc853a81034fad0c9bc46f2daec356ff85a 100644
--- a/src/main/java/net/minecraft/world/item/alchemy/Potions.java
+++ b/src/main/java/net/minecraft/world/item/alchemy/Potions.java
@@ -50,6 +50,7 @@ public class Potions {
     public static final Potion LONG_SLOW_FALLING = register("long_slow_falling", new Potion("slow_falling", new MobEffectInstance(MobEffects.SLOW_FALLING, 4800)));
 
     private static Potion register(String name, Potion potion) {
+        io.papermc.paper.potion.PaperPotion.registerPotion(new io.papermc.paper.potion.PaperPotion(name, potion)); // Paper
         return Registry.register(Registry.POTION, name, potion);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
index 62bca85da6c5d9877e21fecb702370506ddf671c..2aa960487c62de3a42236da6448c3fc38b11c3f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
@@ -582,7 +582,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
             } else if (AbstractArrow.class.isAssignableFrom(clazz)) {
                 if (TippedArrow.class.isAssignableFrom(clazz)) {
                     entity = net.minecraft.world.entity.EntityType.ARROW.create(world);
-                    ((Arrow) entity).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+                    ((Arrow) entity).setPotionType(net.minecraft.world.item.alchemy.Potions.WATER); // Paper
                 } else if (SpectralArrow.class.isAssignableFrom(clazz)) {
                     entity = net.minecraft.world.entity.EntityType.SPECTRAL_ARROW.create(world);
                 } else if (Trident.class.isAssignableFrom(clazz)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index cda09b11acc7bf9afdc4fa3344c6852abb297ca9..dd57467d47f4d59971800e32d94ff185331c513a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -313,6 +313,7 @@ public final class CraftServer implements Server {
         org.bukkit.enchantments.Enchantment.stopAcceptingRegistrations();
 
         Potion.setPotionBrewer(potionBrewer); // Paper
+        io.papermc.paper.potion.PaperPotion.setPotionBrewer(this.potionBrewer); // Paper
         MobEffects.BLINDNESS.getClass();
         PotionEffectType.stopAcceptingRegistrations();
         // Ugly hack :(
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 81ab184cb5235913ef43ae4d7f1ac82bce927519..71c00e7a60ac0dad4d5b7157abf8e3143812fcf4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -733,7 +733,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         net.minecraft.world.entity.projectile.AbstractArrow arrow;
         if (TippedArrow.class.isAssignableFrom(clazz)) {
             arrow = EntityType.ARROW.create(world);
-            ((net.minecraft.world.entity.projectile.Arrow) arrow).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+            ((net.minecraft.world.entity.projectile.Arrow) arrow).setPotionType(net.minecraft.world.item.alchemy.Potions.WATER); // Paper
         } else if (SpectralArrow.class.isAssignableFrom(clazz)) {
             arrow = EntityType.SPECTRAL_ARROW.create(world);
         } else if (Trident.class.isAssignableFrom(clazz)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
index fec308cbc8fb27036301fe27a1169ac7368f9732..57468860b7824a48eadc4d177b161d54ca736520 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
@@ -212,6 +212,18 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
         return CraftPotionUtil.toBukkit(this.getHandle().getPotionType());
     }
 
+    // Paper start
+    @Override
+    public void setBasePotion(io.papermc.paper.potion.Potion potion) {
+        this.getHandle().setPotion(io.papermc.paper.potion.PaperPotion.getHandle(potion));
+    }
+
+    @Override
+    public io.papermc.paper.potion.Potion getBasePotion() {
+        return io.papermc.paper.potion.PaperPotion.getFromNms(this.getHandle().getPotion());
+    }
+    // Paper end
+
     @Override
     public ProjectileSource getSource() {
         net.minecraft.world.entity.LivingEntity source = this.getHandle().getOwner();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 76ee8adfb6cccc15dde748b0796d1de7fc5507f8..b24cdb064d878852b0747cf270dd3a096f15afd5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -508,7 +508,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
                 launch = new Arrow(world, this.getHandle());
-                ((Arrow) launch).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+                ((Arrow) launch).setPotionType(net.minecraft.world.item.alchemy.Potions.WATER); // Paper
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
                 launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, this.getHandle());
             } else if (Trident.class.isAssignableFrom(projectile)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
index 0068f0b3a5f8d53ff91f16b3fe18a4c8cbefc9d7..8f99b8d1372ac392fb7fa640c012c870fd9b800e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
@@ -113,6 +113,18 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
         return CraftPotionUtil.toBukkit(this.getHandle().getPotionType());
     }
 
+    // Paper start
+    @Override
+    public void setBasePotion(io.papermc.paper.potion.Potion potion) {
+        this.getHandle().setPotionType(io.papermc.paper.potion.PaperPotion.getHandle(potion));
+    }
+
+    @Override
+    public io.papermc.paper.potion.Potion getBasePotion() {
+        return io.papermc.paper.potion.PaperPotion.getFromNms(this.getHandle().potion);
+    }
+    // Paper end
+
     @Override
     public void setColor(Color color) {
         int colorRGB = (color == null) ? -1 : color.asRGB();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
index 298326115f048bb79e3c949861c187134eb5efb8..861670527c36d51b7ad518ef8fd637b1703d023b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
@@ -45,7 +45,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
 
     // Having an initial "state" in ItemMeta seems bit dirty but the UNCRAFTABLE potion type
     // is treated as the empty form of the meta because it represents an empty potion with no effect
-    private PotionData type = new PotionData(PotionType.UNCRAFTABLE, false, false);
+    private io.papermc.paper.potion.Potion type = io.papermc.paper.potion.Potion.EMPTY; // Paper
     private List<PotionEffect> customEffects;
     private Color color;
 
@@ -65,7 +65,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     CraftMetaPotion(CompoundTag tag) {
         super(tag);
         if (tag.contains(DEFAULT_POTION.NBT)) {
-            this.type = CraftPotionUtil.toBukkit(tag.getString(DEFAULT_POTION.NBT));
+            this.type = io.papermc.paper.potion.Potion.getByKey(org.bukkit.NamespacedKey.fromString(tag.getString(DEFAULT_POTION.NBT))); // Paper
         }
         if (tag.contains(POTION_COLOR.NBT)) {
             try {
@@ -99,7 +99,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
 
     CraftMetaPotion(Map<String, Object> map) {
         super(map);
-        this.type = CraftPotionUtil.toBukkit(SerializableMeta.getString(map, DEFAULT_POTION.BUKKIT, true));
+        this.type = io.papermc.paper.potion.Potion.getByKey(org.bukkit.NamespacedKey.fromString(SerializableMeta.getString(map, DEFAULT_POTION.BUKKIT, true))); // Paper - improved Potion API
 
         Color color = SerializableMeta.getObject(Color.class, map, POTION_COLOR.BUKKIT, true);
         if (color != null) {
@@ -123,7 +123,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     void applyToItem(CompoundTag tag) {
         super.applyToItem(tag);
 
-        tag.putString(DEFAULT_POTION.NBT, CraftPotionUtil.fromBukkit(type));
+        tag.putString(DEFAULT_POTION.NBT, this.type.getKey().toString()); // Paper - improved Potion API
 
         if (this.hasColor()) {
             tag.putInt(POTION_COLOR.NBT, this.color.asRGB());
@@ -152,7 +152,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     boolean isPotionEmpty() {
-        return (this.type.getType() == PotionType.UNCRAFTABLE) && !(this.hasCustomEffects() || this.hasColor());
+        return (this.type == io.papermc.paper.potion.Potion.EMPTY) && !(this.hasCustomEffects() || this.hasColor()); // Paper - improved Potion API
     }
 
     @Override
@@ -173,11 +173,23 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     @Override
     public void setBasePotionData(PotionData data) {
         Validate.notNull(data, "PotionData cannot be null");
-        this.type = data;
+        this.type = io.papermc.paper.potion.PaperPotion.fromLegacy(data); // Paper - improved Potion API
     }
 
     @Override
     public PotionData getBasePotionData() {
+        // Paper start - improved Potion API
+        return CraftPotionUtil.toBukkit(this.type.getKey().toString()); // Paper - improved Potion API
+    }
+
+    @Override
+    public void setBasePotion(io.papermc.paper.potion.Potion potion) {
+        this.type = potion;
+    }
+
+    @Override
+    public io.papermc.paper.potion.Potion getBasePotion() {
+        // Paper end - improved Potion API
         return this.type;
     }
 
@@ -301,7 +313,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     int applyHash() {
         final int original;
         int hash = original = super.applyHash();
-        if (this.type.getType() != PotionType.UNCRAFTABLE) {
+        if (this.type != io.papermc.paper.potion.Potion.EMPTY) { // Paper - improved Potion API
             hash = 73 * hash + this.type.hashCode();
         }
         if (this.hasColor()) {
@@ -336,8 +348,10 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     @Override
     Builder<String, Object> serialize(Builder<String, Object> builder) {
         super.serialize(builder);
-        if (this.type.getType() != PotionType.UNCRAFTABLE) {
-            builder.put(DEFAULT_POTION.BUKKIT, CraftPotionUtil.fromBukkit(type));
+        // Paper start - improved Potion API
+        if (this.type != io.papermc.paper.potion.Potion.EMPTY) {
+            builder.put(DEFAULT_POTION.BUKKIT, this.type.getKey().toString());
+        // Paper end - improved Potion API
         }
 
         if (this.hasColor()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index a0b0c64b819b8f713eeea78210e276664e30e66e..b03cb9fb1ef85f0659999ce0f7170223bd0dc94d 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -49,8 +49,27 @@ public class CraftPotionBrewer implements PotionBrewer {
     public PotionEffect createEffect(PotionEffectType potion, int duration, int amplifier) {
         return new PotionEffect(potion, potion.isInstant() ? 1 : (int) (duration * potion.getDurationModifier()), amplifier);
     }
-
     // Paper start
+    @Override
+    public boolean isIngredient(org.bukkit.inventory.ItemStack itemStack) {
+        return net.minecraft.world.item.alchemy.PotionBrewing.isIngredient(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack));
+    }
+
+    @Override
+    public boolean isPotionContainerIngredient(org.bukkit.inventory.ItemStack itemStack) {
+        return net.minecraft.world.item.alchemy.PotionBrewing.isContainerIngredient(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack));
+    }
+
+    @Override
+    public boolean isPotionIngredient(org.bukkit.inventory.ItemStack itemStack) {
+        return net.minecraft.world.item.alchemy.PotionBrewing.isPotionIngredient(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack));
+    }
+
+    @Override
+    public boolean isBrewablePotion(io.papermc.paper.potion.Potion potion) {
+        return net.minecraft.world.item.alchemy.PotionBrewing.isBrewablePotion(io.papermc.paper.potion.PaperPotion.getHandle(potion));
+    }
+
     @Override
     public void addPotionMix(io.papermc.paper.potion.PotionMix potionMix) {
         net.minecraft.world.item.alchemy.PotionBrewing.addPotionMix(potionMix);
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
index acb69821a99aa69bce6d127e10976089c85be223..b73f6ce5e59407fd47e5c97c5e5cbff36a7814cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
@@ -62,6 +62,7 @@ public class CraftPotionUtil {
             .put(PotionType.SLOW_FALLING, "long_slow_falling")
             .build();
 
+    @Deprecated // Paper
     public static String fromBukkit(PotionData data) {
         String type;
         if (data.isUpgraded()) {
@@ -76,6 +77,7 @@ public class CraftPotionUtil {
         return "minecraft:" + type;
     }
 
+    @Deprecated // Paper
     public static PotionData toBukkit(String type) {
         if (type == null) {
             return new PotionData(PotionType.UNCRAFTABLE, false, false);
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 2afb7af0a90959edd3b0ead2fe4d9018b5560aa4..d437a7e67a7f6b2bdabd9b966d44880ac28c56a7 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -93,7 +93,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
                 launch = new Arrow(world, iposition.x(), iposition.y(), iposition.z());
-                ((Arrow) launch).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+                ((Arrow) launch).setPotionType(net.minecraft.world.item.alchemy.Potions.WATER); // Paper - improved Potion API
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
                 launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, iposition.x(), iposition.y(), iposition.z());
             } else {
diff --git a/src/test/java/io/papermc/paper/potion/PaperPotionTest.java b/src/test/java/io/papermc/paper/potion/PaperPotionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..5080f9fe4d2cf28d2329613cfbe837842f346b06
--- /dev/null
+++ b/src/test/java/io/papermc/paper/potion/PaperPotionTest.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.potion;
+
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+public class PaperPotionTest extends AbstractTestingBase {
+
+    @Test
+    public void testPaperPotionToNms() {
+        for (Potion value : Potion.values()) {
+            assertTrue(value.getKey() + " does not have an NMS equivalent", Registry.POTION.containsKey(CraftNamespacedKey.toMinecraft(value.getKey())));
+        }
+    }
+
+    @Test
+    public void testNmsToPaperPotion() {
+        for (ResourceLocation location : Registry.POTION.keySet()) {
+            assertNotNull(location + " does not have an API equivalent", Potion.getByKey(CraftNamespacedKey.fromMinecraft(location)));
+        }
+    }
+}
