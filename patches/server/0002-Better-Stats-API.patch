From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 20 May 2021 01:10:15 -0700
Subject: [PATCH] Better Stats API


diff --git a/src/main/java/io/papermc/paper/statistics/PaperStatistics.java b/src/main/java/io/papermc/paper/statistics/PaperStatistics.java
new file mode 100644
index 0000000000000000000000000000000000000000..e8031afc4eb0c7dabb473b4dd58e7d8fb4fdd4a1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/statistics/PaperStatistics.java
@@ -0,0 +1,108 @@
+package io.papermc.paper.statistics;
+
+import com.google.common.base.Preconditions;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.stats.ServerStatsCounter;
+import net.minecraft.stats.Stat;
+import net.minecraft.stats.StatType;
+import net.minecraft.stats.Stats;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.EntityType;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
+import org.checkerframework.framework.qual.DefaultQualifier;
+
+import java.util.Objects;
+
+@DefaultQualifier(NonNull.class)
+public final class PaperStatistics {
+
+    private PaperStatistics() {
+    }
+
+    public static void incrementStatistic(ServerStatsCounter manager, Statistic<?> statistic, int amount) {
+        Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
+        setStatistic(manager, statistic, getStatistic(manager, statistic) + amount);
+    }
+
+    public static void decrementStatistic(ServerStatsCounter manager, Statistic<?> statistic, int amount) {
+        Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
+        setStatistic(manager, statistic, getStatistic(manager, statistic) - amount);
+    }
+
+    public static void setStatistic(ServerStatsCounter manager, Statistic<?> statistic, int newAmount) {
+        Preconditions.checkNotNull(statistic, "Statistic cannot be null");
+        Preconditions.checkArgument(newAmount >= 0, "New amount must be greater than or equal to 0");
+        manager.setValue(null, getNMSStatistic(statistic), newAmount);
+    }
+
+    public static int getStatistic(ServerStatsCounter manager, Statistic<?> statistic) {
+        Preconditions.checkNotNull(statistic, "Statistic cannot be null");
+        return manager.getValue(getNMSStatistic(statistic));
+    }
+
+    public static String getFormattedValue(ServerStatsCounter manager, Statistic<?> statistic) {
+        final Stat<?> nmsStat = getNMSStatistic(statistic);
+        return nmsStat.format(manager.getValue(nmsStat));
+    }
+
+    public static Statistic<?> getPaperStatistic(Stat<?> nmsStat) {
+        final ResourceLocation statTypeKey = Preconditions.checkNotNull(Registry.STAT_TYPE.getKey(nmsStat.getType()), "Could not get the stat type resource location from " + nmsStat);
+        final @Nullable StatisticType<?> type = org.bukkit.Registry.STATISTIC_TYPES.get(CraftNamespacedKey.fromMinecraft(statTypeKey));
+        final Statistic<?> paperStat;
+        if (type == StatisticType.BLOCK_MINED) {
+            paperStat = StatisticType.BLOCK_MINED.of(CraftMagicNumbers.getMaterial((Block) nmsStat.getValue()));
+        } else if (type == StatisticType.ITEM_CRAFTED) {
+            paperStat = StatisticType.ITEM_CRAFTED.of(CraftMagicNumbers.getMaterial((Item) nmsStat.getValue()));
+        } else if (type == StatisticType.ITEM_USED) {
+            paperStat = StatisticType.ITEM_USED.of(CraftMagicNumbers.getMaterial((Item) nmsStat.getValue()));
+        } else if (type == StatisticType.ITEM_BROKEN) {
+            paperStat = StatisticType.ITEM_BROKEN.of(CraftMagicNumbers.getMaterial((Item) nmsStat.getValue()));
+        } else if (type == StatisticType.ITEM_PICKED_UP) {
+            paperStat = StatisticType.ITEM_PICKED_UP.of(CraftMagicNumbers.getMaterial((Item) nmsStat.getValue()));
+        } else if (type == StatisticType.ITEM_DROPPED) {
+            paperStat = StatisticType.ITEM_DROPPED.of(CraftMagicNumbers.getMaterial((Item) nmsStat.getValue()));
+        } else if (type == StatisticType.ENTITY_KILLED) {
+            paperStat = StatisticType.ENTITY_KILLED.of(CraftMagicNumbers.getEntityType((net.minecraft.world.entity.EntityType<?>) nmsStat.getValue()));
+        } else if (type == StatisticType.ENTITY_KILLED_BY) {
+            paperStat = StatisticType.ENTITY_KILLED_BY.of(CraftMagicNumbers.getEntityType((net.minecraft.world.entity.EntityType<?>) nmsStat.getValue()));
+        } else if (type == StatisticType.CUSTOM_STATS) {
+            paperStat = StatisticType.CUSTOM_STATS.of(org.bukkit.Registry.CUSTOM_STATISTICS.get(CraftNamespacedKey.fromMinecraft((ResourceLocation) nmsStat.getValue())));
+        } else {
+            throw new IllegalArgumentException("Did not recognize " + type + " as a statistic type");
+        }
+        return Objects.requireNonNull(paperStat, "Couldn't convert " + nmsStat + " to a stat of type " + type);
+    }
+
+    public static Stat<?> getNMSStatistic(Statistic<?> paperStat) {
+        final StatType<?> type = Preconditions.checkNotNull(Registry.STAT_TYPE.get(CraftNamespacedKey.toMinecraft(paperStat.getType().getKey())), paperStat + " could not be converted to a nms StatType");
+        final Stat<?> nmsStat;
+        if (type == Stats.BLOCK_MINED) {
+            nmsStat = Stats.BLOCK_MINED.get(CraftMagicNumbers.getBlock((Material) paperStat.getStat()));
+        } else if (type == Stats.ITEM_CRAFTED) {
+            nmsStat = Stats.ITEM_CRAFTED.get(CraftMagicNumbers.getItem((Material) paperStat.getStat()));
+        } else if (type == Stats.ITEM_USED) {
+            nmsStat = Stats.ITEM_USED.get(CraftMagicNumbers.getItem((Material) paperStat.getStat()));
+        } else if (type == Stats.ITEM_BROKEN) {
+            nmsStat = Stats.ITEM_BROKEN.get(CraftMagicNumbers.getItem((Material) paperStat.getStat()));
+        } else if (type == Stats.ITEM_PICKED_UP) {
+            nmsStat = Stats.ITEM_PICKED_UP.get(CraftMagicNumbers.getItem((Material) paperStat.getStat()));
+        } else if (type == Stats.ITEM_DROPPED) {
+            nmsStat = Stats.ITEM_DROPPED.get(CraftMagicNumbers.getItem((Material) paperStat.getStat()));
+        } else if (type == Stats.ENTITY_KILLED) {
+            nmsStat = Stats.ENTITY_KILLED.get(CraftMagicNumbers.getEntityTypes((EntityType) paperStat.getStat()));
+        } else if (type == Stats.ENTITY_KILLED_BY) {
+            nmsStat = Stats.ENTITY_KILLED_BY.get(CraftMagicNumbers.getEntityTypes((EntityType) paperStat.getStat()));
+        } else if (type == Stats.CUSTOM) {
+            nmsStat = Stats.CUSTOM.map.get(Registry.CUSTOM_STAT.get(CraftNamespacedKey.toMinecraft(((CustomStatistic) paperStat.getStat()).getKey())));
+        } else {
+            throw new IllegalArgumentException("Did not recognize " + Registry.STAT_TYPE.getKey(type) + " as a statistic type");
+        }
+        return Objects.requireNonNull(nmsStat, "Couldn't convert " + paperStat + " into a nms stat");
+    }
+}
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index c59f98ca3adfdd90cdc5999aeadbb0834efedc0f..a188b93e8b413571ce787c45842f7b9760b0f996 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -247,6 +247,20 @@ public class ServerStatsCounter extends StatsCounter {
 
             object2intmap.put(statistic, this.getValue(statistic));
         }
+        // Paper start
+        if (io.papermc.paper.event.player.PlayerRequestStatisticsEvent.getHandlerList().getRegisteredListeners().length > 0) {
+            io.papermc.paper.event.player.PlayerRequestStatisticsEvent statEvent = new io.papermc.paper.event.player.PlayerRequestStatisticsEvent(
+                player.getBukkitEntity(),
+                object2intmap.object2IntEntrySet()
+                    .stream()
+                    .collect(Object2IntOpenHashMap::new, (map, entry) -> map.put(io.papermc.paper.statistics.PaperStatistics.getPaperStatistic(entry.getKey()), entry.getIntValue()), Object2IntOpenHashMap::putAll)
+            );
+            if (!statEvent.callEvent()) {
+                return;
+            }
+            object2intmap = statEvent.getStatisticMap().object2IntEntrySet().stream().collect(Object2IntOpenHashMap::new, (map, entry) -> map.put(io.papermc.paper.statistics.PaperStatistics.getNMSStatistic(entry.getKey()), entry.getIntValue()), Object2IntOpenHashMap::putAll);
+        }
+        // Paper end
 
         player.connection.send(new ClientboundAwardStatsPacket(object2intmap));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 6d2ba650f53de8a460857f1846401a20b50cc43c..15fe4c97f1613920eacb496c06de6b141c418214 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -358,6 +358,69 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return this.server.getHandle().getPlayerStats(this.getUniqueId(), this.getName());
     }
 
+    // Paper start
+    @Override
+    public void incrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic) {
+        this.incrementStatistic(statistic, 1);
+    }
+
+    @Override
+    public void decrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic) {
+        this.decrementStatistic(statistic, 1);
+    }
+
+    @Override
+    public void incrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic, int amount) {
+        if (this.isOnline()) {
+            this.getPlayer().incrementStatistic(statistic, amount);
+        } else {
+            ServerStatsCounter manager = getStatisticManager();
+            io.papermc.paper.statistics.PaperStatistics.incrementStatistic(manager, statistic, amount);
+            manager.save();
+        }
+
+    }
+
+    @Override
+    public void decrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic, int amount) {
+        if (this.isOnline()) {
+            this.getPlayer().decrementStatistic(statistic, amount);
+        } else {
+            ServerStatsCounter manager = getStatisticManager();
+            io.papermc.paper.statistics.PaperStatistics.decrementStatistic(manager, statistic, amount);
+            manager.save();
+        }
+    }
+
+    @Override
+    public void setStatistic(io.papermc.paper.statistics.Statistic<?> statistic, int newAmount) {
+        if (this.isOnline()) {
+            this.getPlayer().setStatistic(statistic, newAmount);
+        } else {
+            ServerStatsCounter manager = getStatisticManager();
+            io.papermc.paper.statistics.PaperStatistics.setStatistic(manager, statistic, newAmount);
+            manager.save();
+        }
+    }
+
+    @Override
+    public int getStatistic(io.papermc.paper.statistics.Statistic<?> statistic) {
+        if (isOnline()) {
+            return this.getPlayer().getStatistic(statistic);
+        } else {
+            return io.papermc.paper.statistics.PaperStatistics.getStatistic(getStatisticManager(), statistic);
+        }
+    }
+
+    @Override
+    public String getFormattedValue(io.papermc.paper.statistics.Statistic<?> statistic) {
+        if (this.isOnline()) {
+            return this.getPlayer().getFormattedValue(statistic);
+        } else {
+            return io.papermc.paper.statistics.PaperStatistics.getFormattedValue(getStatisticManager(), statistic);
+        }
+    }
+    // Paper end
     @Override
     public void incrementStatistic(Statistic statistic) {
         if (this.isOnline()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 8dbb608e18e9826107f6ca1d93b7033bb1e3407c..613db0666be396013cb0052c9c62cc6786dc4942 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -16,6 +16,7 @@ import org.bukkit.Statistic.Type;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.EntityType;
 
+@Deprecated // Paper
 public enum CraftStatistic {
     DAMAGE_DEALT(Stats.DAMAGE_DEALT),
     DAMAGE_TAKEN(Stats.DAMAGE_TAKEN),
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 66830ccee464083879f79db4111e08fecee417ec..a5461bdaabb1e923fc6440994c3d9e9e94f13179 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1447,6 +1447,42 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return bukkitRecipeKeys.build();
     }
 
+    // Paper start
+    @Override
+    public void incrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic) {
+        this.incrementStatistic(statistic, 1);
+    }
+
+    @Override
+    public void decrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic) {
+        this.decrementStatistic(statistic, 1);
+    }
+
+    @Override
+    public void incrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic, int amount) {
+        io.papermc.paper.statistics.PaperStatistics.incrementStatistic(this.getHandle().getStats(), statistic, amount);
+    }
+
+    @Override
+    public void decrementStatistic(io.papermc.paper.statistics.Statistic<?> statistic, int amount) {
+        io.papermc.paper.statistics.PaperStatistics.decrementStatistic(this.getHandle().getStats(), statistic, amount);
+    }
+
+    @Override
+    public void setStatistic(io.papermc.paper.statistics.Statistic<?> statistic, int newAmount) {
+        io.papermc.paper.statistics.PaperStatistics.setStatistic(this.getHandle().getStats(), statistic, newAmount);
+    }
+
+    @Override
+    public int getStatistic(io.papermc.paper.statistics.Statistic<?> statistic) {
+        return io.papermc.paper.statistics.PaperStatistics.getStatistic(this.getHandle().getStats(), statistic);
+    }
+
+    @Override
+    public String getFormattedValue(io.papermc.paper.statistics.Statistic<?> statistic) {
+        return io.papermc.paper.statistics.PaperStatistics.getFormattedValue(this.getHandle().getStats(), statistic);
+    }
+    // Paper end
     @Override
     public void incrementStatistic(Statistic statistic) {
         CraftStatistic.incrementStatistic(this.getHandle().getStats(), statistic);
diff --git a/src/test/java/io/papermc/paper/statistics/PaperStatsTest.java b/src/test/java/io/papermc/paper/statistics/PaperStatsTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d1e2200707b007d9e72b3ad2575878697554651
--- /dev/null
+++ b/src/test/java/io/papermc/paper/statistics/PaperStatsTest.java
@@ -0,0 +1,62 @@
+package io.papermc.paper.statistics;
+
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.stats.StatType;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.Test;
+
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThrows;
+
+public class PaperStatsTest extends AbstractTestingBase {
+
+    @Test
+    public void testNMSCustomStatToPaperCustomStat() {
+        Set<ResourceLocation> missingKeys = new HashSet<>();
+        for (ResourceLocation minecraftKey : Registry.CUSTOM_STAT) {
+            if (org.bukkit.Registry.CUSTOM_STATISTICS.get(CraftNamespacedKey.fromMinecraft(minecraftKey)) == null) {
+                missingKeys.add(minecraftKey);
+            }
+        }
+        StringBuilder sb = new StringBuilder("\n");
+        for (ResourceLocation missingKey : missingKeys) {
+            sb.append("public static final CustomStatistic ").append(missingKey.getPath().toUpperCase(Locale.ENGLISH)).append(" = create(\"").append(missingKey.getPath()).append("\");\n");
+        }
+        if (!missingKeys.isEmpty()) {
+            System.out.println(sb);
+        }
+        assertEquals("Some stats are missing paper counterparts: " + missingKeys, 0, missingKeys.size());
+    }
+
+    @Test
+    public void testPaperCustomStatToNMSCustomStat() {
+        Set<CustomStatistic> extraStats = new HashSet<>();
+        for (CustomStatistic paperCustomStat : org.bukkit.Registry.CUSTOM_STATISTICS) {
+            ResourceLocation stat = Registry.CUSTOM_STAT.get(CraftNamespacedKey.toMinecraft(paperCustomStat.getKey()));
+            if (stat == null) {
+                extraStats.add(paperCustomStat);
+            }
+        }
+        assertEquals("These stats do not have NMS counterparts: " + extraStats, 0, extraStats.size());
+    }
+
+    @Test
+    public void checkAllStatTypes() {
+        for (StatType<?> stat : Registry.STAT_TYPE) {
+            assertNotNull(Registry.STAT_TYPE.getKey(stat) + " is missing its paper counterpart", org.bukkit.Registry.STATISTIC_TYPES.get(CraftNamespacedKey.fromMinecraft(Registry.STAT_TYPE.getKey(stat))));
+        }
+    }
+
+    @Test
+    public void testInvalidStat() {
+        assertThrows("created a block mined stat for a pickaxe", IllegalArgumentException.class, () -> StatisticType.BLOCK_MINED.of(Material.DIAMOND_PICKAXE));
+    }
+}
diff --git a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
index 9292a0119499d14c9ed170999ac3b8dfdd1f839a..1a3f5c27620a24bee40e8003467821055dca7eb6 100644
--- a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
+++ b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
@@ -61,6 +61,14 @@ public class TranslationKeyTest extends AbstractTestingBase {
         }
     }
 
+    @Test
+    public void testStatType() {
+        for (io.papermc.paper.statistics.StatisticType<?> statisticType : org.bukkit.Registry.STATISTIC_TYPES) {
+            if (statisticType == io.papermc.paper.statistics.StatisticType.CUSTOM_STATS) continue;
+            Assert.assertEquals("translation key mismatch for " + statisticType, Registry.STAT_TYPE.get(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(statisticType.getKey())).getTranslationKey(), statisticType.translationKey());
+        }
+    }
+
     @Test
     public void testCreativeCategory() {
         for (CreativeModeTab tab : CreativeModeTab.TABS) {
