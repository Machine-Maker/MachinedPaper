From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 20 May 2021 01:10:54 -0700
Subject: [PATCH] Better Stats API


diff --git a/src/main/java/io/papermc/paper/event/player/PlayerRequestStatisticsEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerRequestStatisticsEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ce1b6ae06c411f0e346e3ccf5760ec5aa86e43e3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerRequestStatisticsEvent.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.event.player;
+
+import io.papermc.paper.statistic.Statistic;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the player requests their statistics.
+ */
+public class PlayerRequestStatisticsEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final Object2IntMap<Statistic<?>> statisticMap;
+    private boolean cancelled;
+
+    public PlayerRequestStatisticsEvent(@NotNull Player who, @NotNull Object2IntMap<Statistic<?>> statisticMap) {
+        super(who);
+        this.statisticMap = statisticMap;
+    }
+
+    /**
+     * Gets the statistic map to be sent to the player.
+     *
+     * @return the mutable statistic map
+     */
+    @NotNull
+    public Object2IntMap<Statistic<?>> getStatisticMap() {
+        return statisticMap;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/statistic/CustomStatistic.java b/src/main/java/io/papermc/paper/statistic/CustomStatistic.java
new file mode 100644
index 0000000000000000000000000000000000000000..7b9f4295a1a195404aa77101f323d25662d7e600
--- /dev/null
+++ b/src/main/java/io/papermc/paper/statistic/CustomStatistic.java
@@ -0,0 +1,134 @@
+package io.papermc.paper.statistic;
+
+import net.kyori.adventure.translation.Translatable;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * This is essentially just a wrapper for {@link NamespacedKey} because
+ * that can't implement {@link Keyed} which is needed for all stat types.
+ */
+public final class CustomStatistic implements Keyed, Translatable {
+
+    static final Map<NamespacedKey, CustomStatistic> CUSTOM_STATISTIC_MAP = new HashMap<>();
+
+    public static final CustomStatistic LEAVE_GAME = create("leave_game");
+    public static final CustomStatistic PLAY_TIME = create("play_time");
+    public static final CustomStatistic TOTAL_WORLD_TIME = create("total_world_time");
+    public static final CustomStatistic TIME_SINCE_DEATH = create("time_since_death");
+    public static final CustomStatistic TIME_SINCE_REST = create("time_since_rest");
+    public static final CustomStatistic SNEAK_TIME = create("sneak_time");
+    public static final CustomStatistic WALK_ONE_CM = create("walk_one_cm");
+    public static final CustomStatistic CROUCH_ONE_CM = create("crouch_one_cm");
+    public static final CustomStatistic SPRINT_ONE_CM = create("sprint_one_cm");
+    public static final CustomStatistic WALK_ON_WATER_ONE_CM = create("walk_on_water_one_cm");
+    public static final CustomStatistic FALL_ONE_CM = create("fall_one_cm");
+    public static final CustomStatistic CLIMB_ONE_CM = create("climb_one_cm");
+    public static final CustomStatistic FLY_ONE_CM = create("fly_one_cm");
+    public static final CustomStatistic WALK_UNDER_WATER_ONE_CM = create("walk_under_water_one_cm");
+    public static final CustomStatistic MINECART_ONE_CM = create("minecart_one_cm");
+    public static final CustomStatistic BOAT_ONE_CM = create("boat_one_cm");
+    public static final CustomStatistic PIG_ONE_CM = create("pig_one_cm");
+    public static final CustomStatistic HORSE_ONE_CM = create("horse_one_cm");
+    public static final CustomStatistic AVIATE_ONE_CM = create("aviate_one_cm");
+    public static final CustomStatistic SWIM_ONE_CM = create("swim_one_cm");
+    public static final CustomStatistic STRIDER_ONE_CM = create("strider_one_cm");
+    public static final CustomStatistic JUMP = create("jump");
+    public static final CustomStatistic DROP = create("drop");
+    public static final CustomStatistic DAMAGE_DEALT = create("damage_dealt");
+    public static final CustomStatistic DAMAGE_DEALT_ABSORBED = create("damage_dealt_absorbed");
+    public static final CustomStatistic DAMAGE_DEALT_RESISTED = create("damage_dealt_resisted");
+    public static final CustomStatistic DAMAGE_TAKEN = create("damage_taken");
+    public static final CustomStatistic DAMAGE_BLOCKED_BY_SHIELD = create("damage_blocked_by_shield");
+    public static final CustomStatistic DAMAGE_ABSORBED = create("damage_absorbed");
+    public static final CustomStatistic DAMAGE_RESISTED = create("damage_resisted");
+    public static final CustomStatistic DEATHS = create("deaths");
+    public static final CustomStatistic MOB_KILLS = create("mob_kills");
+    public static final CustomStatistic ANIMALS_BRED = create("animals_bred");
+    public static final CustomStatistic PLAYER_KILLS = create("player_kills");
+    public static final CustomStatistic FISH_CAUGHT = create("fish_caught");
+    public static final CustomStatistic TALKED_TO_VILLAGER = create("talked_to_villager");
+    public static final CustomStatistic TRADED_WITH_VILLAGER = create("traded_with_villager");
+    public static final CustomStatistic EAT_CAKE_SLICE = create("eat_cake_slice");
+    public static final CustomStatistic FILL_CAULDRON = create("fill_cauldron");
+    public static final CustomStatistic USE_CAULDRON = create("use_cauldron");
+    public static final CustomStatistic CLEAN_ARMOR = create("clean_armor");
+    public static final CustomStatistic CLEAN_BANNER = create("clean_banner");
+    public static final CustomStatistic CLEAN_SHULKER_BOX = create("clean_shulker_box");
+    public static final CustomStatistic INTERACT_WITH_BREWINGSTAND = create("interact_with_brewingstand");
+    public static final CustomStatistic INTERACT_WITH_BEACON = create("interact_with_beacon");
+    public static final CustomStatistic INSPECT_DROPPER = create("inspect_dropper");
+    public static final CustomStatistic INSPECT_HOPPER = create("inspect_hopper");
+    public static final CustomStatistic INSPECT_DISPENSER = create("inspect_dispenser");
+    public static final CustomStatistic PLAY_NOTEBLOCK = create("play_noteblock");
+    public static final CustomStatistic TUNE_NOTEBLOCK = create("tune_noteblock");
+    public static final CustomStatistic POT_FLOWER = create("pot_flower");
+    public static final CustomStatistic TRIGGER_TRAPPED_CHEST = create("trigger_trapped_chest");
+    public static final CustomStatistic OPEN_ENDERCHEST = create("open_enderchest");
+    public static final CustomStatistic ENCHANT_ITEM = create("enchant_item");
+    public static final CustomStatistic PLAY_RECORD = create("play_record");
+    public static final CustomStatistic INTERACT_WITH_FURNACE = create("interact_with_furnace");
+    public static final CustomStatistic INTERACT_WITH_CRAFTING_TABLE = create("interact_with_crafting_table");
+    public static final CustomStatistic OPEN_CHEST = create("open_chest");
+    public static final CustomStatistic SLEEP_IN_BED = create("sleep_in_bed");
+    public static final CustomStatistic OPEN_SHULKER_BOX = create("open_shulker_box");
+    public static final CustomStatistic OPEN_BARREL = create("open_barrel");
+    public static final CustomStatistic INTERACT_WITH_BLAST_FURNACE = create("interact_with_blast_furnace");
+    public static final CustomStatistic INTERACT_WITH_SMOKER = create("interact_with_smoker");
+    public static final CustomStatistic INTERACT_WITH_LECTERN = create("interact_with_lectern");
+    public static final CustomStatistic INTERACT_WITH_CAMPFIRE = create("interact_with_campfire");
+    public static final CustomStatistic INTERACT_WITH_CARTOGRAPHY_TABLE = create("interact_with_cartography_table");
+    public static final CustomStatistic INTERACT_WITH_LOOM = create("interact_with_loom");
+    public static final CustomStatistic INTERACT_WITH_STONECUTTER = create("interact_with_stonecutter");
+    public static final CustomStatistic BELL_RING = create("bell_ring");
+    public static final CustomStatistic RAID_TRIGGER = create("raid_trigger");
+    public static final CustomStatistic RAID_WIN = create("raid_win");
+    public static final CustomStatistic INTERACT_WITH_ANVIL = create("interact_with_anvil");
+    public static final CustomStatistic INTERACT_WITH_GRINDSTONE = create("interact_with_grindstone");
+    public static final CustomStatistic TARGET_HIT = create("target_hit");
+    public static final CustomStatistic INTERACT_WITH_SMITHING_TABLE = create("interact_with_smithing_table");
+
+    private static CustomStatistic create(String key) {
+        return StatisticType.CUSTOM_STATS.registerCustomStatistic(new CustomStatistic(key));
+    }
+
+    private final NamespacedKey key;
+
+    private CustomStatistic(String key) {
+        this.key = NamespacedKey.minecraft(key);
+        CUSTOM_STATISTIC_MAP.put(this.key, this);
+    }
+
+    @Override
+    public @NotNull NamespacedKey getKey() {
+        return this.key;
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "stat." + this.getKey().toString().replace(':', '.');
+    }
+
+    /**
+     * Gets the actual statistic for this custom stat.
+     *
+     * @return the actual statistic
+     */
+    public @NotNull Statistic<CustomStatistic> statistic() {
+        return io.papermc.paper.statistic.StatisticType.CUSTOM_STATS.of(this);
+    }
+
+    @Override
+    public @NotNull String toString() {
+        return this.getKey().toString();
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/statistic/Statistic.java b/src/main/java/io/papermc/paper/statistic/Statistic.java
new file mode 100644
index 0000000000000000000000000000000000000000..591e3fef265b4428b266fe7f2b55ab2812cec9d6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/statistic/Statistic.java
@@ -0,0 +1,55 @@
+package io.papermc.paper.statistic;
+
+import org.bukkit.Keyed;
+import org.bukkit.scoreboard.Criteria;
+import org.bukkit.scoreboard.RenderType;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents an individual statistic
+ *
+ * @param <S> stat (one of {@link org.bukkit.entity.EntityType}, {@link org.bukkit.Material} or {@link CustomStatistic}.
+ */
+public final class Statistic<S extends Keyed> implements Criteria {
+
+    private final S value;
+    private final StatisticType<S> type;
+
+    Statistic(@NotNull S value, @NotNull StatisticType<S> type) {
+        this.value = value;
+        this.type = type;
+    }
+
+    /**
+     * Gets the statistic.
+     *
+     * @return the stat
+     */
+    public @NotNull S value() {
+        return this.value;
+    }
+
+    public @NotNull StatisticType<S> type() {
+        return this.type;
+    }
+
+    @Override
+    public @NotNull String getName() {
+        return this.toString();
+    }
+
+    @Override
+    public boolean isReadOnly() {
+        return false;
+    }
+
+    @Override
+    public @NotNull RenderType getDefaultRenderType() {
+        return RenderType.INTEGER;
+    }
+
+    @Override
+    public String toString() {
+        return this.type.getKey().toString().replace(':', '.')  + ':' + this.value.getKey().toString().replace(':', '.');
+    }
+}
diff --git a/src/main/java/io/papermc/paper/statistic/StatisticType.java b/src/main/java/io/papermc/paper/statistic/StatisticType.java
new file mode 100644
index 0000000000000000000000000000000000000000..e90a2f076699d79ff5a5570a0a3f337ccd0f1bac
--- /dev/null
+++ b/src/main/java/io/papermc/paper/statistic/StatisticType.java
@@ -0,0 +1,119 @@
+package io.papermc.paper.statistic;
+
+import com.google.common.base.Preconditions;
+import net.kyori.adventure.translation.Translatable;
+import org.bukkit.Keyed;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.IdentityHashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.function.Predicate;
+
+public final class StatisticType<S extends Keyed> implements Keyed, Translatable {
+
+    static final Map<NamespacedKey, StatisticType<?>> STATISTIC_TYPE_MAP = new HashMap<>();
+
+    public static final StatisticType<Material> BLOCK_MINED = forMaterial("mined", Material::isBlock);
+    public static final StatisticType<Material> ITEM_CRAFTED = forMaterial("crafted", Material::isItem);
+    public static final StatisticType<Material> ITEM_USED = forMaterial("used", Material::isItem);
+    public static final StatisticType<Material> ITEM_BROKEN = forMaterial("broken", Material::isItem);
+    public static final StatisticType<Material> ITEM_PICKED_UP = forMaterial("picked_up", Material::isItem);
+    public static final StatisticType<Material> ITEM_DROPPED = forMaterial("dropped", Material::isItem);
+    public static final StatisticType<EntityType> ENTITY_KILLED = forEntityType("killed", entityType -> entityType != EntityType.UNKNOWN);
+    public static final StatisticType<EntityType> ENTITY_KILLED_BY = forEntityType("killed_by", entityType -> entityType != EntityType.UNKNOWN);
+    public static final StatisticType<CustomStatistic> CUSTOM_STATS = new StatisticType<>("custom", 75, Registry.CUSTOM_STATISTIC);
+
+    private static StatisticType<Material> forMaterial(String key, Predicate<Material> typeCheck) {
+        return new StatisticType<>(key, Registry.MATERIAL, (int) Arrays.stream(Material.values()).filter(Predicate.not(Material::isLegacy)).filter(typeCheck).count(), typeCheck);
+    }
+
+    private static StatisticType<EntityType> forEntityType(String key, Predicate<EntityType> typeCheck) {
+        return new StatisticType<>(key, Registry.ENTITY_TYPE, EntityType.values().length - 1, typeCheck);
+    }
+
+    private final NamespacedKey key;
+    private final Registry<S> registry;
+    private final Map<S, Statistic<S>> statisticMap;
+    private final Predicate<S> typeCheck;
+
+    private StatisticType(String key, int expectedSize, Registry<S> registry) {
+        this(key, registry, expectedSize, s -> true);
+    }
+
+    private StatisticType(String key, Registry<S> registry, int expectedSize, Predicate<S> typeCheck) {
+        this.key = NamespacedKey.minecraft(key);
+        this.registry = registry;
+        this.statisticMap = new IdentityHashMap<>(expectedSize);
+        this.typeCheck = typeCheck;
+        STATISTIC_TYPE_MAP.put(this.key, this);
+    }
+
+    /**
+     * Creates or gets the statistic from this type for the specified value.
+     *
+     * @param value what you want the stat of
+     * @return the statistic for that thing
+     * @throws IllegalArgumentException if the thing is not valid for this {@link StatisticType}
+     */
+    public @NotNull Statistic<S> of(@NotNull S value) {
+        if (!this.typeCheck.test(value)) {
+            throw new IllegalArgumentException(value + " is not valid for " + this.getKey());
+        }
+        if (this == StatisticType.CUSTOM_STATS) {
+            return Objects.requireNonNull(this.statisticMap.get(value), "This should never be null as all custom stats should be present in this map upon initialization");
+        }
+        return this.statisticMap.computeIfAbsent(value, newValue -> new Statistic<>(value, this));
+    }
+
+    @NotNull S registerCustomStatistic(@NotNull S stat) {
+        if (this != StatisticType.CUSTOM_STATS) {
+            throw new IllegalArgumentException("Must be the CUSTOM_STATS stat type");
+        }
+        this.statisticMap.put(stat, new Statistic<>(stat, this));
+        return stat;
+    }
+
+    /**
+     * Gets the registry associated with this stat type.
+     *
+     * @return the registry
+     */
+    public @NotNull Registry<S> registry() {
+        return this.registry;
+    }
+
+    @Override
+    public @NotNull NamespacedKey getKey() {
+        return this.key;
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * {@link StatisticType#CUSTOM_STATS} does <b>NOT</b> have a
+     * translation key.
+     * @throws IllegalArgumentException if used with {@link StatisticType#CUSTOM_STATS}
+     * @see CustomStatistic#translationKey()
+     */
+    @Override
+    public @NotNull String translationKey() {
+        Preconditions.checkArgument(this != StatisticType.CUSTOM_STATS, "CUSTOM_STATS does not have a translation key");
+        return "stat_type." + this.getKey().toString().replace(':', '.');
+    }
+
+    @Override
+    public String toString() {
+        return this.key.toString();
+    }
+}
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 9b84cb5abdf3db55cbc7ba19c8cd6955bf4fc5ec..541cd8834b2b945d00108bc5facef8c7693c5a8f 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -254,6 +254,79 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return last seen time
      */
     public long getLastSeen();
+
+    /**
+     * Decrements the given stat for this player.
+     * <p>
+     * This is equivalent to the following code: {@code decrementStatistic(Statistic, 1)}
+     *
+     * @param statistic the stat to decrement
+     * @throws IllegalArgumentException if the stat is invalid OR decreasing the stat value would put the stat below 0
+     */
+    default void decrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic) {
+        this.decrementStatistic(statistic, 1);
+    }
+
+    /**
+     * Increments the given stat for this player.
+     * <p>
+     * This is equivalent to the following code: {@code incrementStatistic(Statistic, 1)}
+     *
+     * @param statistic the stat to increment
+     * @throws IllegalArgumentException if the stat is invalid
+     */
+    default void incrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic) {
+        this.incrementStatistic(statistic, 1);
+    }
+
+    /**
+     * Decrements the given stat for this player.
+     *
+     * @param statistic the stat to decrement
+     * @param amount the value to decrement by
+     * @throws IllegalArgumentException if the stat is invalid, the amount is nonpositive, or the stat
+     * would have a negative value after decrementing it
+     */
+    default void decrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic, int amount) {
+        this.incrementStatistic(statistic, -amount);
+    }
+
+    /**
+     * Increments the given stat for this player.
+     *
+     * @param statistic the stat to increment
+     * @param amount the amount to increment by
+     * @throws IllegalArgumentException if the stat is invalid or the amount is nonpositive
+     */
+    public void incrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic, int amount);
+
+    /**
+     * Sets the given stat for this player.
+     *
+     * @param statistic the stat to set
+     * @param newAmount the value to set the stat to
+     * @throws IllegalArgumentException if the stat is invalid or the amount is negative
+     */
+    public void setStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic, int newAmount);
+
+    /**
+     * Gets the given stat for this player.
+     *
+     * @param statistic the stat to get
+     * @return the amount for the stat
+     * @throws IllegalArgumentException if the stat is invalid
+     */
+    public int getStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic);
+
+    /**
+     * Get the formatted value for this stat. This is how the stat might
+     * appear in the client's statistic window
+     *
+     * @param statistic the stat to get the formatted value for
+     * @return the formatted value
+     * @throws IllegalArgumentException if the stat is invalid
+     */
+    public @NotNull String getFormattedValue(@NotNull io.papermc.paper.statistic.Statistic<?> statistic);
     // Paper end
 
     /**
@@ -266,7 +339,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public void incrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
@@ -279,7 +354,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public void decrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
@@ -291,7 +368,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void incrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
@@ -303,7 +382,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void decrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
@@ -315,7 +396,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #setStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void setStatistic(@NotNull Statistic statistic, int newValue) throws IllegalArgumentException;
 
     /**
@@ -326,7 +409,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #getStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public int getStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
@@ -341,7 +426,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
@@ -356,7 +443,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
@@ -369,7 +458,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #getStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public int getStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
@@ -383,7 +474,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
 
     /**
@@ -397,7 +490,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
 
     /**
@@ -411,7 +506,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #setStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void setStatistic(@NotNull Statistic statistic, @NotNull Material material, int newValue) throws IllegalArgumentException;
 
     /**
@@ -426,7 +523,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
@@ -441,7 +540,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
@@ -454,7 +555,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #getStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated // Paper
     public int getStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
@@ -468,7 +571,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount) throws IllegalArgumentException;
 
     /**
@@ -482,7 +587,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount);
 
     /**
@@ -496,7 +603,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #setStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated // Paper
     public void setStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int newValue);
 
     /**
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 1d96ed754be09b52a518967c870eba05bb3e99ee..16df3ef470ec2e54fdb04b782bce45a5d1e0cb0b 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -132,7 +132,9 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Server statistics.
      *
      * @see Statistic
+     * @deprecated use {@link #CUSTOM_STATISTIC} and {@link #STATISTIC_TYPE}
      */
+    @Deprecated(forRemoval = true) // Paper
     Registry<Statistic> STATISTIC = new SimpleRegistry<>(Statistic.class);
     /**
      * Server structures.
@@ -256,6 +258,20 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
             return Arrays.stream(org.bukkit.potion.PotionEffectType.values()).iterator();
         }
     };
+    /**
+     * Custom statistics
+     *
+     * @see io.papermc.paper.statistic.CustomStatistic
+     */
+    Registry<io.papermc.paper.statistic.CustomStatistic> CUSTOM_STATISTIC = java.util.Objects.requireNonNull(org.bukkit.Bukkit.getRegistry(io.papermc.paper.statistic.CustomStatistic.class));
+
+    /**
+     * Statistic types
+     *
+     * @see io.papermc.paper.statistic.StatisticType
+     */
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    Registry<io.papermc.paper.statistic.StatisticType<?>> STATISTIC_TYPE = java.util.Objects.requireNonNull(org.bukkit.Bukkit.getRegistry((Class<io.papermc.paper.statistic.StatisticType<?>>) (Class) io.papermc.paper.statistic.StatisticType.class));
     // Paper end
 
     /**
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 4ce888688d04eb0c4b2261a6474df870e7d2bb00..84e2303090640b590c88da492214d2188fef2b73 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -5,7 +5,9 @@ import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a countable statistic, which is tracked by the server.
+ * @deprecated use {@link io.papermc.paper.statistic.StatisticType} and {@link io.papermc.paper.statistic.Statistic}
  */
+@Deprecated(forRemoval = true) // Paper
 public enum Statistic implements Keyed {
     DAMAGE_DEALT,
     DAMAGE_TAKEN,
@@ -152,7 +154,9 @@ public enum Statistic implements Keyed {
     /**
      * The type of statistic.
      *
+     * @deprecated use {@link io.papermc.paper.statistic.StatisticType}
      */
+    @Deprecated(forRemoval = true) // Paper
     public enum Type {
         /**
          * Statistics of this type do not require a qualifier.
@@ -174,4 +178,65 @@ public enum Statistic implements Keyed {
          */
         ENTITY;
     }
+    // Paper start - add legacy conversion methods
+    @Deprecated(forRemoval = true)
+    public static Statistic toLegacy(io.papermc.paper.statistic.Statistic<?> stat) {
+        if (stat.type() == io.papermc.paper.statistic.StatisticType.CUSTOM_STATS && stat.value() instanceof io.papermc.paper.statistic.CustomStatistic customStatistic) {
+            if (customStatistic == io.papermc.paper.statistic.CustomStatistic.PLAY_TIME) { // special case cause upstream is wrong
+                return org.bukkit.Statistic.PLAY_ONE_MINUTE;
+            } else {
+                return java.util.Objects.requireNonNull(org.bukkit.Registry.STATISTIC.get(customStatistic.getKey()), "Couldn't convert " + stat + " to a legacy stat");
+            }
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.BLOCK_MINED) {
+            return Statistic.MINE_BLOCK;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_BROKEN) {
+            return Statistic.BREAK_ITEM;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_CRAFTED) {
+            return Statistic.CRAFT_ITEM;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_DROPPED) {
+            return Statistic.DROP;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_USED) {
+            return Statistic.USE_ITEM;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_PICKED_UP) {
+            return Statistic.PICKUP;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ENTITY_KILLED) {
+            return Statistic.KILL_ENTITY;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ENTITY_KILLED_BY) {
+            return Statistic.ENTITY_KILLED_BY;
+        }
+        throw new IllegalArgumentException("Couldn't convert " + stat + " to a legacy stat");
+    }
+
+    @Deprecated(forRemoval = true)
+    public io.papermc.paper.statistic.Statistic<?> toModern(@org.jetbrains.annotations.Nullable org.bukkit.entity.EntityType entityType, @org.jetbrains.annotations.Nullable Material material) {
+        com.google.common.base.Preconditions.checkArgument(entityType == null || material == null, "No stat has an entity type and material value at the same time");
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.UNTYPED || (entityType == null && material == null), "no value needed for untyped stats");
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.ENTITY || entityType != null);
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.BLOCK || material != null && material.isBlock());
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.ITEM || material != null && material.isItem());
+        return switch (this.type) {
+            case UNTYPED -> {
+                if (this == PLAY_ONE_MINUTE) { // special case cause upstream is wrong
+                    yield io.papermc.paper.statistic.CustomStatistic.PLAY_TIME.statistic();
+                } else {
+                    yield java.util.Objects.requireNonNull(Registry.CUSTOM_STATISTIC.get(this.key), "Couldn't convert " + this + " to a modern stat").statistic();
+                }
+            }
+            case BLOCK -> io.papermc.paper.statistic.StatisticType.BLOCK_MINED.of(material);
+            case ITEM -> switch (this) {
+                case DROP -> io.papermc.paper.statistic.StatisticType.ITEM_DROPPED.of(material);
+                case BREAK_ITEM -> io.papermc.paper.statistic.StatisticType.ITEM_BROKEN.of(material);
+                case CRAFT_ITEM -> io.papermc.paper.statistic.StatisticType.ITEM_CRAFTED.of(material);
+                case USE_ITEM -> io.papermc.paper.statistic.StatisticType.ITEM_USED.of(material);
+                case PICKUP -> io.papermc.paper.statistic.StatisticType.ITEM_PICKED_UP.of(material);
+                default -> throw new IllegalArgumentException("Couldn't convert " + this + ", mat: " + material + " to a modern stat");
+            };
+            case ENTITY -> switch (this) {
+                case KILL_ENTITY -> io.papermc.paper.statistic.StatisticType.ENTITY_KILLED.of(entityType);
+                case ENTITY_KILLED_BY -> io.papermc.paper.statistic.StatisticType.ENTITY_KILLED_BY.of(entityType);
+                default -> throw new IllegalArgumentException("Couldn't convert " + this + ", entity_type: " + entityType + " to a modern stat");
+            };
+        };
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
index f971844bf490c7a7bfbe305d33df739ed2197a37..ef36f8f1fe2b793870c6ca82eaf48612deb1e59d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
@@ -18,48 +18,75 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    protected final Statistic statistic;
+    private final io.papermc.paper.statistic.Statistic<?> statistic; // Paper
     private final int initialValue;
     private final int newValue;
     private boolean isCancelled = false;
+    @Deprecated(forRemoval = true) // Paper
     private final EntityType entityType;
+    @Deprecated(forRemoval = true) // Paper
     private final Material material;
 
+    @Deprecated(forRemoval = true) // Paper
     public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue) {
         super(player);
-        this.statistic = statistic;
+        this.statistic = statistic.toModern(null, null); // Paper
         this.initialValue = initialValue;
         this.newValue = newValue;
         this.entityType = null;
         this.material = null;
     }
 
+    @Deprecated(forRemoval = true) // Paper
     public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull EntityType entityType) {
         super(player);
-        this.statistic = statistic;
+        this.statistic = statistic.toModern(entityType, null); // Paper
         this.initialValue = initialValue;
         this.newValue = newValue;
         this.entityType = entityType;
         this.material = null;
     }
 
+    @Deprecated(forRemoval = true) // Paper
     public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull Material material) {
         super(player);
-        this.statistic = statistic;
+        this.statistic = statistic.toModern(null, material); // Paper
         this.initialValue = initialValue;
         this.newValue = newValue;
         this.entityType = null;
         this.material = material;
     }
+    // Paper start
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull io.papermc.paper.statistic.Statistic<?> statistic, int initialValue, int newValue) {
+        super(player);
+        this.statistic = statistic;
+        this.initialValue = initialValue;
+        this.newValue = newValue;
+        this.entityType = statistic.value() instanceof EntityType entityType ? entityType : null;
+        this.material = statistic.value() instanceof Material material ? material : null;
+    }
+
+    /**
+     * Gets the statistic that is being incremented.
+     *
+     * @return the incremented statistic
+     */
+    public @NotNull io.papermc.paper.statistic.Statistic<?> getStat() {
+        return this.statistic;
+    }
+    // Paper end
 
     /**
      * Gets the statistic that is being incremented.
      *
      * @return the incremented statistic
+     * @deprecated use {@link #getStat()}
      */
     @NotNull
+    @Deprecated(forRemoval = true) // Paper
     public Statistic getStatistic() {
-        return statistic;
+        return Statistic.toLegacy(this.statistic); // Paper
     }
 
     /**
@@ -85,8 +112,10 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
      * entity statistic otherwise returns null.
      *
      * @return the EntityType of the statistic
+     * @deprecated use {@link #getStat()}
      */
     @Nullable
+    @Deprecated(forRemoval = true) // Paper
     public EntityType getEntityType() {
         return entityType;
     }
@@ -96,8 +125,10 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
      * or item statistic otherwise returns null.
      *
      * @return the Material of the statistic
+     * @deprecated use {@link #getStat()}
      */
     @Nullable
+    @Deprecated(forRemoval = true) // Paper
     public Material getMaterial() {
         return material;
     }
diff --git a/src/main/java/org/bukkit/scoreboard/Criteria.java b/src/main/java/org/bukkit/scoreboard/Criteria.java
index 3bc3abaf093d13e22b6ac2ee59ab584c92b4666a..56cf36b696062490de2adb68c796c5bb74732b0c 100644
--- a/src/main/java/org/bukkit/scoreboard/Criteria.java
+++ b/src/main/java/org/bukkit/scoreboard/Criteria.java
@@ -12,8 +12,8 @@ import org.jetbrains.annotations.NotNull;
  * Represents a scoreboard criteria, either custom or built-in to the Minecraft server, used to
  * keep track of and manually or automatically change scores on a scoreboard.
  * <p>
- * While this class outlines constants for standard criteria, see {@link #statistic(Statistic)}
- * (and its overloads) to create instances for statistically-backed criteria.
+ * While this class outlines constants for standard criteria, see {@link io.papermc.paper.statistic.Statistic}
+ * for statistically-backed criteria.
  */
 public interface Criteria {
 
@@ -241,8 +241,10 @@ public interface Criteria {
      * {@link Material#isBlock()} is false
      * @throws IllegalArgumentException if {@link Statistic#getType()} is {@link Type#ITEM}, but
      * {@link Material#isItem()} is false
+     * @deprecated use {@link io.papermc.paper.statistic.Statistic}
      */
     @NotNull
+    @Deprecated // Paper
     public static Criteria statistic(@NotNull Statistic statistic, @NotNull Material material) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         Preconditions.checkArgument(material != null, "material must not be null");
@@ -298,8 +300,10 @@ public interface Criteria {
      * @param entityType the relevant entity type
      * @return the criteria
      * @throws IllegalArgumentException if {@link Statistic#getType()} is not {@link Type#ENTITY}
+     * @deprecated use {@link io.papermc.paper.statistic.Statistic}
      */
     @NotNull
+    @Deprecated(forRemoval = true) // Paper
     public static Criteria statistic(@NotNull Statistic statistic, @NotNull EntityType entityType) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         Preconditions.checkArgument(entityType != null, "entityType must not be null");
@@ -331,8 +335,10 @@ public interface Criteria {
      *
      * @param statistic the statistic for which to get a criteria
      * @return the criteria
+     * @deprecated Use {@link io.papermc.paper.statistic.Statistic}
      */
     @NotNull
+    @Deprecated(forRemoval = true) // Paper
     public static Criteria statistic(@NotNull Statistic statistic) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         return Bukkit.getScoreboardCriteria(org.bukkit.Bukkit.getUnsafe().getStatisticCriteriaKey(statistic)); // Paper
